// Generated by view binder compiler. Do not edit!
package com.example.face2face.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import com.example.face2face.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView imageconference;

  @NonNull
  public final LinearLayout layoutHeader;

  @NonNull
  public final SwipeRefreshLayout swipeRefreshLayout;

  @NonNull
  public final TextView textErrorMessage;

  @NonNull
  public final TextView textSignOut;

  @NonNull
  public final TextView textTitle;

  @NonNull
  public final RecyclerView usersRecyclerView;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView imageconference, @NonNull LinearLayout layoutHeader,
      @NonNull SwipeRefreshLayout swipeRefreshLayout, @NonNull TextView textErrorMessage,
      @NonNull TextView textSignOut, @NonNull TextView textTitle,
      @NonNull RecyclerView usersRecyclerView) {
    this.rootView = rootView;
    this.imageconference = imageconference;
    this.layoutHeader = layoutHeader;
    this.swipeRefreshLayout = swipeRefreshLayout;
    this.textErrorMessage = textErrorMessage;
    this.textSignOut = textSignOut;
    this.textTitle = textTitle;
    this.usersRecyclerView = usersRecyclerView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.imageconference;
      ImageView imageconference = rootView.findViewById(id);
      if (imageconference == null) {
        break missingId;
      }

      id = R.id.layoutHeader;
      LinearLayout layoutHeader = rootView.findViewById(id);
      if (layoutHeader == null) {
        break missingId;
      }

      id = R.id.swipeRefreshLayout;
      SwipeRefreshLayout swipeRefreshLayout = rootView.findViewById(id);
      if (swipeRefreshLayout == null) {
        break missingId;
      }

      id = R.id.textErrorMessage;
      TextView textErrorMessage = rootView.findViewById(id);
      if (textErrorMessage == null) {
        break missingId;
      }

      id = R.id.textSignOut;
      TextView textSignOut = rootView.findViewById(id);
      if (textSignOut == null) {
        break missingId;
      }

      id = R.id.textTitle;
      TextView textTitle = rootView.findViewById(id);
      if (textTitle == null) {
        break missingId;
      }

      id = R.id.usersRecyclerView;
      RecyclerView usersRecyclerView = rootView.findViewById(id);
      if (usersRecyclerView == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, imageconference, layoutHeader,
          swipeRefreshLayout, textErrorMessage, textSignOut, textTitle, usersRecyclerView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
